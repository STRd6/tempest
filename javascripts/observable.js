!function(){var Observable,base,computeDependencies,extend,remove,__slice=[].slice;Observable=function(value){var changed,fn,listeners,notify,notifyReturning,self;if(typeof(value!=null?value.observe:void 0)==="function"){return value}listeners=[];notify=function(newValue){return listeners.forEach(function(listener){return listener(newValue)})};if(typeof value==="function"){fn=value;self=function(){if(base){self.observe(base)}return value};self.observe=function(listener){return listeners.push(listener)};changed=function(){value=fn();return notify(value)};value=computeDependencies(fn,changed)}else{self=function(newValue){if(arguments.length>0){if(value!==newValue){value=newValue;notify(newValue)}}else{if(base){self.observe(base)}}return value};self.observe=function(listener){return listeners.push(listener)}}self.each=function(){var args,_ref;args=1<=arguments.length?__slice.call(arguments,0):[];if(value!=null){return(_ref=[value]).forEach.apply(_ref,args)}};if(Array.isArray(value)){["concat","every","filter","forEach","indexOf","join","lastIndexOf","map","reduce","reduceRight","slice","some"].forEach(function(method){return self[method]=function(){var args;args=1<=arguments.length?__slice.call(arguments,0):[];return value[method].apply(value,args)}});["pop","push","reverse","shift","splice","sort","unshift"].forEach(function(method){return self[method]=function(){var args;args=1<=arguments.length?__slice.call(arguments,0):[];return notifyReturning(value[method].apply(value,args))}});notifyReturning=function(returnValue){notify(value);return returnValue};extend(self,{each:function(){var args;args=1<=arguments.length?__slice.call(arguments,0):[];self.forEach.apply(self,args);return self},remove:function(object){var index;index=value.indexOf(object);if(index>=0){return notifyReturning(value.splice(index,1)[0])}},get:function(index){return value[index]},first:function(){return value[0]},last:function(){return value[value.length-1]}})}self.stopObserving=function(fn){return remove(listeners,fn)};return self};module.exports=Observable;extend=function(){var name,source,sources,target,_i,_len;target=arguments[0],sources=2<=arguments.length?__slice.call(arguments,1):[];for(_i=0,_len=sources.length;_i<_len;_i++){source=sources[_i];for(name in source){target[name]=source[name]}}return target};base=void 0;computeDependencies=function(fn,root){var value;base=root;value=fn();base=void 0;return value};remove=function(array,value){var index;index=array.indexOf(value);if(index>=0){return array.splice(index,1)[0]}}}.call(this);